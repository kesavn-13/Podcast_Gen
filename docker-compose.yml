# Paperâ†’Podcast Development Environment
# Docker Compose for local development and testing

version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      target: development
    container_name: paper-podcast-app
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - DEBUG=true
      - ENVIRONMENT=development
      - DATABASE_URL=sqlite:///./podcast_gen.db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - paper-podcast-network
    restart: unless-stopped

  # Streamlit UI service
  streamlit:
    build:
      context: .
      target: development
    container_name: paper-podcast-ui
    ports:
      - "8501:8501"
    volumes:
      - .:/app
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    command: ["streamlit", "run", "ui/streamlit_app.py", "--server.port", "8501", "--server.address", "0.0.0.0"]
    depends_on:
      - app
    networks:
      - paper-podcast-network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: paper-podcast-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - paper-podcast-network
    restart: unless-stopped

  # Nginx reverse proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: paper-podcast-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
      - streamlit
    networks:
      - paper-podcast-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus for metrics (hackathon monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: paper-podcast-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - paper-podcast-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: paper-podcast-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=hackathon2025
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - paper-podcast-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local  
  grafana_data:
    driver: local

networks:
  paper-podcast-network:
    driver: bridge